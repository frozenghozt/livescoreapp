{"ast":null,"code":"import * as actions from \"./actionTypes\"; // Sign up action creator\n\nexport const signUp = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    const res = await firebase.auth().createUserWithEmailAndPassword(data.email, data.password); // Send the verfication email\n\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    await firestore.collection(\"users\").doc(res.user.uid).set({\n      firstName: data.firstName,\n      lastName: data.lastName\n    });\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n\n  dispatch({\n    type: actions.AUTH_END\n  });\n}; // Logout action creator\n\nexport const signOut = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n\n  try {\n    await firebase.auth().signOut();\n  } catch (err) {\n    console.log(err.message);\n  }\n}; // Login action creator\n\nexport const signIn = data => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    await firebase.auth().signInWithEmailAndPassword(data.email, data.password);\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n\n  dispatch({\n    type: actions.AUTH_END\n  });\n}; // Clean up messages\n\nexport const clean = () => ({\n  type: actions.CLEAN_UP\n}); // Verify email actionTypes\n\nexport const verifyEmail = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.VERIFY_START\n  });\n\n  try {\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    dispatch({\n      type: actions.VERIFY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.VERIFY_FAIL,\n      payload: err.message\n    });\n  }\n}; // Send recover password\n\nexport const recoverPassword = data => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.RECOVERY_START\n  });\n\n  try {\n    // send email ehre\n    await firebase.auth().sendPasswordResetEmail(data.email);\n    dispatch({\n      type: actions.RECOVERY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.RECOVERY_FAIL,\n      payload: err.message\n    });\n  }\n}; // Edit profile\n\nexport const editProfile = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const user = firebase.auth().currentUser;\n  const {\n    uid: userId,\n    email: userEmail\n  } = getState().firebase.auth;\n  dispatch({\n    type: actions.PROFILE_EDIT_START\n  });\n\n  try {\n    //edit the user profile\n    if (data.email !== userEmail) {\n      await user.updateEmail(data.email);\n    }\n\n    await firestore.collection(\"users\").doc(userId).set({\n      firstName: data.firstName,\n      lastName: data.lastName\n    });\n\n    if (data.password.length > 0) {\n      await user.updatePassword(data.password);\n    }\n\n    dispatch({\n      type: actions.PROFILE_EDIT_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.PROFILE_EDIT_FAIL,\n      payload: err.message\n    });\n  }\n}; // Delete user\n\nexport const deleteUser = () => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const user = firebase.auth().currentUser;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.DELETE_START\n  });\n\n  try {\n    await firestore.collection(\"users\").doc(userId).delete();\n    await firestore.collection(\"todos\").doc(userId).delete();\n    await user.delete();\n  } catch (err) {\n    dispatch({\n      type: actions.DELETE_FAIL,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/diogo/Desktop/livescore/src/Redux/Actions/authActions.js"],"names":["actions","signUp","data","dispatch","getState","getFirebase","getFirestore","firebase","firestore","type","AUTH_START","res","auth","createUserWithEmailAndPassword","email","password","user","currentUser","sendEmailVerification","collection","doc","uid","set","firstName","lastName","AUTH_SUCCESS","err","AUTH_FAIL","payload","message","AUTH_END","signOut","console","log","signIn","signInWithEmailAndPassword","clean","CLEAN_UP","verifyEmail","VERIFY_START","VERIFY_SUCCESS","VERIFY_FAIL","recoverPassword","RECOVERY_START","sendPasswordResetEmail","RECOVERY_SUCCESS","RECOVERY_FAIL","editProfile","userId","userEmail","PROFILE_EDIT_START","updateEmail","length","updatePassword","PROFILE_EDIT_SUCCESS","PROFILE_EDIT_FAIL","deleteUser","DELETE_START","delete","DELETE_FAIL"],"mappings":"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","sourcesContent":["import * as actions from \"./actionTypes\";\r\n\r\n// Sign up action creator\r\nexport const signUp = (data) => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase, getFirestore }\r\n) => {\r\n  const firebase = getFirebase();\r\n  const firestore = getFirestore();\r\n  dispatch({ type: actions.AUTH_START });\r\n  try {\r\n    const res = await firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(data.email, data.password);\r\n\r\n    // Send the verfication email\r\n    const user = firebase.auth().currentUser;\r\n    await user.sendEmailVerification();\r\n\r\n    await firestore.collection(\"users\").doc(res.user.uid).set({\r\n      firstName: data.firstName,\r\n      lastName: data.lastName,\r\n    });\r\n    dispatch({ type: actions.AUTH_SUCCESS });\r\n  } catch (err) {\r\n    dispatch({ type: actions.AUTH_FAIL, payload: err.message });\r\n  }\r\n  dispatch({ type: actions.AUTH_END });\r\n};\r\n\r\n// Logout action creator\r\nexport const signOut = () => async (dispatch, getState, { getFirebase }) => {\r\n  const firebase = getFirebase();\r\n  try {\r\n    await firebase.auth().signOut();\r\n  } catch (err) {\r\n    console.log(err.message);\r\n  }\r\n};\r\n\r\n// Login action creator\r\nexport const signIn = (data) => async (dispatch, getState, { getFirebase }) => {\r\n  const firebase = getFirebase();\r\n  dispatch({ type: actions.AUTH_START });\r\n  try {\r\n    await firebase.auth().signInWithEmailAndPassword(data.email, data.password);\r\n    dispatch({ type: actions.AUTH_SUCCESS });\r\n  } catch (err) {\r\n    dispatch({ type: actions.AUTH_FAIL, payload: err.message });\r\n  }\r\n  dispatch({ type: actions.AUTH_END });\r\n};\r\n\r\n// Clean up messages\r\nexport const clean = () => ({\r\n  type: actions.CLEAN_UP,\r\n});\r\n\r\n// Verify email actionTypes\r\nexport const verifyEmail = () => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase }\r\n) => {\r\n  const firebase = getFirebase();\r\n  dispatch({ type: actions.VERIFY_START });\r\n  try {\r\n    const user = firebase.auth().currentUser;\r\n    await user.sendEmailVerification();\r\n    dispatch({ type: actions.VERIFY_SUCCESS });\r\n  } catch (err) {\r\n    dispatch({ type: actions.VERIFY_FAIL, payload: err.message });\r\n  }\r\n};\r\n\r\n// Send recover password\r\nexport const recoverPassword = (data) => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase }\r\n) => {\r\n  const firebase = getFirebase();\r\n  dispatch({ type: actions.RECOVERY_START });\r\n  try {\r\n    // send email ehre\r\n    await firebase.auth().sendPasswordResetEmail(data.email);\r\n    dispatch({ type: actions.RECOVERY_SUCCESS });\r\n  } catch (err) {\r\n    dispatch({ type: actions.RECOVERY_FAIL, payload: err.message });\r\n  }\r\n};\r\n\r\n// Edit profile\r\nexport const editProfile = (data) => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase, getFirestore }\r\n) => {\r\n  const firebase = getFirebase();\r\n  const firestore = getFirestore();\r\n  const user = firebase.auth().currentUser;\r\n  const { uid: userId, email: userEmail } = getState().firebase.auth;\r\n  dispatch({ type: actions.PROFILE_EDIT_START });\r\n  try {\r\n    //edit the user profile\r\n    if (data.email !== userEmail) {\r\n      await user.updateEmail(data.email);\r\n    }\r\n\r\n    await firestore.collection(\"users\").doc(userId).set({\r\n      firstName: data.firstName,\r\n      lastName: data.lastName,\r\n    });\r\n\r\n    if (data.password.length > 0) {\r\n      await user.updatePassword(data.password);\r\n    }\r\n    dispatch({ type: actions.PROFILE_EDIT_SUCCESS });\r\n  } catch (err) {\r\n    dispatch({ type: actions.PROFILE_EDIT_FAIL, payload: err.message });\r\n  }\r\n};\r\n\r\n// Delete user\r\nexport const deleteUser = () => async (\r\n  dispatch,\r\n  getState,\r\n  { getFirebase, getFirestore }\r\n) => {\r\n  const firebase = getFirebase();\r\n  const firestore = getFirestore();\r\n  const user = firebase.auth().currentUser;\r\n  const userId = getState().firebase.auth.uid;\r\n  dispatch({ type: actions.DELETE_START });\r\n  try {\r\n    await firestore.collection(\"users\").doc(userId).delete();\r\n\r\n    await firestore.collection(\"todos\").doc(userId).delete();\r\n\r\n    await user.delete();\r\n  } catch (err) {\r\n    dispatch({ type: actions.DELETE_FAIL, payload: err.message });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}