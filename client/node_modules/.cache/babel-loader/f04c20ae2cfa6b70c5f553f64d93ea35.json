{"ast":null,"code":"import { useEffect } from \"react\";\n\nconst useOnClickOutside = (ref, handler, onclose) => {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n      onclose();\n    };\n\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, // Add ref and handler to effect dependencies\n  // It's worth noting that because passed in handler is a new ...\n  // ... function on every render that will cause this effect ...\n  // ... callback/cleanup to run every render. It's not a big deal ...\n  // ... but to optimize you can wrap handler in useCallback before ...\n  // ... passing it into this hook.\n  [ref, handler]);\n};\n\nexport default useOnClickOutside;","map":{"version":3,"sources":["C:/Users/diogo/Desktop/livescore/client/src/customHooks/useOnClickOutside.js"],"names":["useEffect","useOnClickOutside","ref","handler","onclose","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,GAAD,EAAMC,OAAN,EAAeC,OAAf,KAA2B;AACnDJ,EAAAA,SAAS,CACP,MAAM;AACJ,UAAMK,QAAQ,GAAIC,KAAD,IAAW;AAC1B;AACA,UAAI,CAACJ,GAAG,CAACK,OAAL,IAAgBL,GAAG,CAACK,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACtD;AACD;;AAEDN,MAAAA,OAAO,CAACG,KAAD,CAAP;AACAF,MAAAA,OAAO;AACR,KARD;;AAUAM,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;AACAK,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwCN,QAAxC;AAEA,WAAO,MAAM;AACXK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;AACAK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,EAA2CP,QAA3C;AACD,KAHD;AAID,GAnBM,EAoBP;AACA;AACA;AACA;AACA;AACA;AACA,GAACH,GAAD,EAAMC,OAAN,CA1BO,CAAT;AA4BD,CA7BD;;AA+BA,eAAeF,iBAAf","sourcesContent":["import { useEffect } from \"react\";\r\n\r\nconst useOnClickOutside = (ref, handler, onclose) => {\r\n  useEffect(\r\n    () => {\r\n      const listener = (event) => {\r\n        // Do nothing if clicking ref's element or descendent elements\r\n        if (!ref.current || ref.current.contains(event.target)) {\r\n          return;\r\n        }\r\n\r\n        handler(event);\r\n        onclose();\r\n      };\r\n\r\n      document.addEventListener(\"mousedown\", listener);\r\n      document.addEventListener(\"touchstart\", listener);\r\n\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", listener);\r\n        document.removeEventListener(\"touchstart\", listener);\r\n      };\r\n    },\r\n    // Add ref and handler to effect dependencies\r\n    // It's worth noting that because passed in handler is a new ...\r\n    // ... function on every render that will cause this effect ...\r\n    // ... callback/cleanup to run every render. It's not a big deal ...\r\n    // ... but to optimize you can wrap handler in useCallback before ...\r\n    // ... passing it into this hook.\r\n    [ref, handler]\r\n  );\r\n};\r\n\r\nexport default useOnClickOutside;\r\n"]},"metadata":{},"sourceType":"module"}